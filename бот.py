import logging
import re
from telegram import ReplyKeyboardMarkup, ReplyKeyboardRemove, Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ConversationHandler,
    filters,
    ContextTypes,
)
from rapidfuzz import process, fuzz

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)

# –°–æ—Å—Ç–æ—è–Ω–∏—è
CHOICE, MAGAZIN, ORDER, RETURN, RESTART, COMMENT, COMMENT_EXCHANGE = range(7)

# –¢–æ–∫–µ–Ω –∏ —á–∞—Ç
TOKEN = "7749753466:AAEkq87KxBo8rko4fuyDl-5RIL64nxpMbos"
TARGET_CHAT_ID = -1002805411399

# –ü—Ä—è–Ω–∏–∫–∏
pryaniki_items = [
    {"name": "–ë–µ–ª—ã–µ –ø–∞–∫–µ—Ç—ã", "category": "–ë–µ–ª—ã–µ", "aliases": ["–±–µ–ª—ã–µ –ø–∞–∫–µ—Ç—ã", "–±–ø", "–±–µ–ª—ã—Ö", "–±–µ–ª—ã–µ", "–±–µ–ª"]},
    {"name": "–ß–µ—Ä–Ω—ã–µ –ø–∞–∫–µ—Ç—ã", "category": "–ß–µ—Ä–Ω—ã–µ", "aliases": ["—á–µ—Ä–Ω—ã–µ –ø–∞–∫–µ—Ç—ã", "—á–ø", "—á–µ—Ä–Ω", "—á–µ—Ä–Ω—ã–µ", "—á–µ—Ä–Ω—ã—Ö", "—á–µ—Ä–Ω—ã–µ –ø–∞–∫"]},
    {"name": "–†–æ–∑–æ–≤—ã–µ –ø–∞–∫–µ—Ç—ã", "category": "–†–æ–∑–æ–≤—ã–µ", "aliases": ["—Ä–æ–∑–æ–≤—ã–µ", "—Ä–æ–∑ –ø–∞–∫", "—Ä–æ–∑", "—Ä–æ–∑–æ–≤—ã—Ö", "—Ä–æ–∑–∞–≤—ã–µ", "—Ä–æ–∑–æ–≤—ã–µ –ø–∞–∫–µ—Ç—ã"]},
    {"name": "–ö–ª—É–±–Ω–∏—á–Ω—ã–µ", "category": "0.3", "aliases": ["–∫–ª—É–±–Ω–∏—á–Ω—ã–µ", "–∫–ª—É–±–Ω", "–∫–ª—É–±", "–∫–ª—É–±–Ω–∏–∫–∞"]},
    {"name": "–°–ª–∏–≤–æ—á–Ω—ã–µ", "category": "0.3", "aliases": ["—Å–ª–∏–≤–æ—á–Ω—ã–µ", "—Å–ª–∏–≤", "—Å–ª–∏–≤–æ—á"]},
    {"name": "–õ–∏–º–æ–Ω–Ω—ã–µ", "category": "0.3", "aliases": ["–ª–∏–º–æ–Ω–Ω—ã–µ", "–ª–∏–º–æ–Ω", "–ª–∏–º"]},
    {"name": "–ê–ø–µ–ª—å—Å–∏–Ω–æ–≤—ã–µ", "category": "0.3", "aliases": ["–∞–ø–µ–ª—å—Å–∏–Ω–æ–≤—ã–µ", "–∞–ø–µ–ª—å—Å", "–∞–ø–µ–ª—å—Å–∏–Ω"]},
    {"name": "–§—Ä—É–∫—Ç–æ–≤—ã–µ", "category": "0.3", "aliases": ["—Ñ—Ä—É–∫—Ç–æ–≤—ã–µ", "—Ñ—Ä—É–∫—Ç", "—Ñ—Ä—É–∫"]},
    {"name": "–ò—Ç–∞–ª—å—è–Ω—Å–∫–∞—è –∫–∞—Ä–∞–º–µ–ª—å", "category": "0.3", "aliases": ["–∏—Ç –∫–∞—Ä–∞–º–µ–ª—å", "–∫–∞—Ä–∞–º–µ–ª—å", "–∫–∞—Ä–∞–º", "–∏—Ç –∫–∞—Ä–∞–º"]},
    {"name": "–¢–æ–ø–ª–µ–Ω–∫–∞", "category": "0.3", "aliases": ["—Ç–æ–ø–ª–µ–Ω–∫–∞", "—Ç–æ–ø–ª", "—Ç–æ–ø–ª–µ–Ω", "—Ç–æ–ø–ª–µ–Ω–Ω–æ–µ –º–æ–ª–æ–∫–æ"]},
    {"name": "–†–æ–º–∞—à–∫–∞", "category": "0.4", "aliases": ["—Ä–æ–º–∞—à–∫–∞", "—Ä–æ–º–∞—à", "—Ä–æ–º"]},
    {"name": "–ú–µ–¥–æ–≤—ã–µ", "category": "0.4", "aliases": ["–º–µ–¥–æ–≤—ã–µ", "–º–µ–¥–æ–≤"]},
    {"name": "–ú–∞–∫–æ–≤—ã–µ", "category": "0.4", "aliases": ["–º–∞–∫–æ–≤—ã–µ", "–º–∞–∫", "–º–∞–∫–æ–≤"]},
    {"name": "–í–∞–Ω–∏–ª—å–Ω—ã–µ", "category": "0.4", "aliases": ["–≤–∞–Ω–∏–ª—å–Ω—ã–µ", "–≤–∞–Ω–∏–ª—å", "–≤–∞–Ω", "–≤–∞–Ω–∏–ª"]},
    {"name": "Love Kz", "category": "0.4", "aliases": ["love kz", "love", "–ª–æ–≤", "–ª–∞–≤", "–ª–æ–≤ –∫–∑", "–ª–∞–≤ –∫–∑"]},
    {"name": "–†–∂–∞–Ω—ã–µ", "category": "0.4", "aliases": ["—Ä–∂–∞–Ω—ã–µ", "—Ä–∂–∞–Ω", "—Ä–∂", "—Ä–∂–∞–Ω–æ–π"]},
    {"name": "–°–≥—É—â–µ–Ω–∫–∞", "category": "0.45", "aliases": ["—Å–≥—É—â–µ–Ω–∫–∞", "—Å–≥—É—â–µ–Ω", "—Å–≥—É—â", "—Å–Ω—É—â"]},
    {"name": "–ê–π–Ω–∞–ª–∞–π–Ω", "category": "0.45", "aliases": ["–∞–π–Ω–∞–ª–∞–π–Ω", "–∞–π–Ω–∞–ª", "–∞–π–Ω–∞–ª–∞"]},
    {"name": "–í–∏–Ω–æ–≥—Ä–∞–¥", "category": "0.45", "aliases": ["–≤–∏–Ω–æ–≥—Ä–∞–¥", "–≤–∏–Ω–æ–≥—Ä–∞–¥–Ω—ã–µ", "–≤–∏–Ω", "–≤–∏–Ω–∞–≥—Ä–∞–¥"]},
    {"name": "–¢–≤–æ—Ä–æ–∂–æ–∫", "category": "0.45", "aliases": ["—Ç–≤–æ—Ä–æ–∂–æ–∫", "—Ç–≤–æ—Ä–æ–≥", "—Ç–≤–∞—Ä–∞–∂–æ–∫", "—Ç–≤–∞—Ä–æ–∂", "—Ç–≤–æ—Ä"]},
    {"name": "–ë–µ–ª—ã–µ –≤–µ—Å–æ–≤—ã–µ", "category": "–ë–µ–ª—ã–µ –≤–µ—Å–æ–≤—ã–µ", "aliases": ["–±–µ–ª –≤–µ—Å–æ–≤—ã–µ", "–±–µ–ª –≤–µ—Å", "–≤–µ—Å –±–µ–ª"]},
    {"name": "–í–µ—Å–æ–≤—ã–µ –∫—Ä—É–≥–ª—ã–µ", "category": "–í–µ—Å–æ–≤—ã–µ (–∫—Ä—É–≥–ª—ã–µ –∏ –æ–≤–∞–ª—å–Ω—ã–µ)", "aliases": ["–∫—Ä—É–≥–ª—ã–µ", "–∫—Ä—É–≥–ª", "–≤–µ—Å –∫—Ä—É–≥–ª"]},
    {"name": "–í–µ—Å–æ–≤—ã–µ –æ–≤–∞–ª—å–Ω—ã–µ", "category": "–í–µ—Å–æ–≤—ã–µ (–∫—Ä—É–≥–ª—ã–µ –∏ –æ–≤–∞–ª—å–Ω—ã–µ)", "aliases": ["–æ–≤–∞–ª", "–≤–µ—Å –æ–≤–∞–ª"]},
    {"name": "0.3", "category": "0.3", "aliases": ["0.3", "0,3"]},
    {"name": "0.4", "category": "0.4", "aliases": ["0.4", "0,4"]},
    {"name": "0.45", "category": "0.45", "aliases": ["0.45", "0,45"]},
    {"name": "–í–µ—Å–æ–≤—ã–µ", "category": "–í–µ—Å–æ–≤—ã–µ", "aliases": ["–≤–µ—Å–æ–≤—ã–µ", "–≤–µ—Å", "–≤–µ—Å–æ–≤–æ–µ"]},
]

# –¶–µ–Ω—ã
regular_prices = {
    "0.3": 400,
    "0.4": 460,
    "0.45": 490,
    "–ë–µ–ª—ã–µ": 550,
    "–ß–µ—Ä–Ω—ã–µ": 550,
    "–†–æ–∑–æ–≤—ã–µ": 550,
    "–í–µ—Å–æ–≤—ã–µ (–∫—Ä—É–≥–ª—ã–µ –∏ –æ–≤–∞–ª—å–Ω—ã–µ)": 4320,
    "–ë–µ–ª—ã–µ –≤–µ—Å–æ–≤—ã–µ": 5740,
    "–í–µ—Å–æ–≤—ã–µ": 4320,
}
special_prices = {
    "0.3": 360,
    "0.4": 450,
    "0.45": 405,
    "–ë–µ–ª—ã–µ": 495,
    "–ß–µ—Ä–Ω—ã–µ": 495,
    "–†–æ–∑–æ–≤—ã–µ": 495,
    "–ë–µ–ª—ã–µ –≤–µ—Å–æ–≤—ã–µ": 5600,
    "–í–µ—Å–æ–≤—ã–µ (–∫—Ä—É–≥–ª—ã–µ –∏ –æ–≤–∞–ª—å–Ω—ã–µ)": 4200,
    "–í–µ—Å–æ–≤—ã–µ": 4200,
}

# –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞—è–≤–∫–∏
def parse_order(text):
    text = text.lower()
    pairs = re.findall(r"([\d\w.,]+)[\s\-:]*?(\d+)", text)  # —Å—Ç–∞—Ä—ã–π —à–∞–±–ª–æ–Ω: —Å–ª–æ–≤–æ + —á–∏—Å–ª–æ
    reverse_pairs = re.findall(r"(\d+)[\s\-:]*?([\d\w.,]+)", text)  # –Ω–æ–≤—ã–π: —á–∏—Å–ª–æ + —Å–ª–æ–≤–æ
    all_pairs = pairs + [(b, a) for a, b in reverse_pairs]  # –æ–±—ä–µ–¥–∏–Ω—è–µ–º

    detailed, summary = {}, {}

    for name_part, qty_str in all_pairs:
        qty = int(qty_str)
        name_part_cleaned = name_part.strip().replace(",", ".")

        best_match = None
        best_score = 0
        for item in pryaniki_items:
            match, score, _ = process.extractOne(name_part_cleaned, item["aliases"], scorer=fuzz.ratio)
            if score > best_score:
                best_score = score
                best_match = item

        if best_score >= 80 and best_match:
            name = best_match["name"]
            cat = best_match["category"]
            detailed[name] = detailed.get(name, 0) + qty
            summary[cat] = summary.get(cat, 0) + qty

    return detailed, summary

def calculate_total(summary, prices):
    return sum(summary.get(cat, 0) * prices.get(cat, 0) for cat in summary)

# –°—Ç–∞—Ä—Ç
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    markup = ReplyKeyboardMarkup([["–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞—è–≤–∫—É", "–ü—Ä–æ–ø—É—Å–∫ / –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"]], one_time_keyboard=True, resize_keyboard=True)
    await update.message.reply_text("–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?", reply_markup=markup)
    return CHOICE

# –í—ã–±–æ—Ä
async def handle_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    t = update.message.text.strip().lower()
    if "–∑–∞—è–≤–∫" in t:
        await update.message.reply_text("–ù–∞–∑–æ–≤–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –º–∞–≥–∞–∑–∏–Ω.", reply_markup=ReplyKeyboardRemove())
        return MAGAZIN
    elif "–∫–æ–º–º–µ–Ω—Ç–∞—Ä" in t or "–ø—Ä–æ–ø—É—Å–∫" in t:
        await update.message.reply_text("–ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞ –∏ –ø—Ä–∏—á–∏–Ω—É –ø—Ä–æ–ø—É—Å–∫–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ):", reply_markup=ReplyKeyboardRemove())
        return COMMENT
    else:
        await update.message.reply_text("–ù–µ –ø–æ–Ω—è–ª –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞: /start")
        return ConversationHandler.END

# –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π / –ø—Ä–æ–ø—É—Å–∫
async def handle_comment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    t = update.message.text.strip()
    parts = t.split(maxsplit=1)
    magazin = parts[0]
    reason = parts[1] if len(parts) > 1 else None
    context.user_data['comment_result'] = f"üö´ {magazin} ‚Äî –ü—Ä–æ–ø—É—Å–∫" + (f" ({reason})" if reason else "")
    markup = ReplyKeyboardMarkup([["‚ùå –ù–µ—Ç –æ–±–º–µ–Ω–∞"]], one_time_keyboard=True, resize_keyboard=True)
    await update.message.reply_text("–ï—Å–ª–∏ –µ—Å—Ç—å –æ–±–º–µ–Ω ‚Äî –Ω–∞–ø–∏—à–∏ –µ–≥–æ. –ï—Å–ª–∏ –Ω–µ—Ç ‚Äî –Ω–∞–∂–º–∏ ‚ùå", reply_markup=markup)
    return COMMENT_EXCHANGE

async def handle_comment_exchange(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    base = context.user_data['comment_result']
    if "–Ω–µ—Ç" in text.lower() or "‚ùå" in text:
        result = base
    else:
        detailed, _ = parse_order(text)
        lines = [f"{name}: {qty}" for name, qty in detailed.items()]
        result = base + ("\nüîÑ –û–±–º–µ–Ω:\n" + "\n".join(lines) if lines else f"\nüîÑ –û–±–º–µ–Ω: {text}")
    await context.bot.send_message(chat_id=TARGET_CHAT_ID, text=result)
    await update.message.reply_text("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ ‚úÖ", reply_markup=ReplyKeyboardMarkup([["/start"]], one_time_keyboard=True))
    return ConversationHandler.END

# –ù–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞
async def get_magazin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü—Ü–µ–Ω—É
    if any(key in text.lower() for key in ["—Å–ø–µ—Ü", "—Å–ø–µ—Ü —Ü–µ–Ω–∞", "—Å–ø–µ—Ü.—Ü–µ–Ω–∞", "—Å–ø–µ—Ü —Ü–µ–Ω"]):
        context.user_data['use_special_price'] = True
        # –£–¥–∞–ª—è–µ–º —Å–ª–æ–≤–æ "—Å–ø–µ—Ü" –∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞
        clean_name = re.sub(r"\b—Å–ø–µ—Ü(?:\.| —Ü–µ–Ω–∞| —Ü–µ–Ω)?\b", "", text, flags=re.IGNORECASE).strip()
        context.user_data['magazin'] = f"{clean_name} (—Å–ø–µ—Ü —Ü–µ–Ω–∞)"
    else:
        context.user_data['use_special_price'] = False
        context.user_data['magazin'] = text

    reply_keyboard = [["–ù–µ—Ç"]]
    markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True, resize_keyboard=True)
    await update.message.reply_text("–ï—Å—Ç—å –ª–∏ –≤–æ–∑–≤—Ä–∞—Ç? –ù–∞–ø–∏—à–∏ –∏–ª–∏ –Ω–∞–∂–º–∏ '–ù–µ—Ç'", reply_markup=markup)
    return RETURN

# –í–æ–∑–≤—Ä–∞—Ç
async def get_return(update: Update, context: ContextTypes.DEFAULT_TYPE):
    txt = update.message.text.strip()
    context.user_data['return_raw'] = txt
    d, s = parse_order(txt)
    context.user_data['return_detailed'] = d
    context.user_data['return_summary'] = s
    await update.message.reply_text("–ß—Ç–æ –∑–∞–∫–∞–∑–∞–ª –º–∞–≥–∞–∑–∏–Ω?")
    return ORDER

# –ó–∞–∫–∞–∑
async def get_order(update: Update, context: ContextTypes.DEFAULT_TYPE):
    txt = update.message.text.strip()
    d, s = parse_order(txt)
    prices = special_prices if context.user_data.get('use_special_price') else regular_prices
    total = calculate_total(s, prices)
    context.user_data['order_detailed'] = d
    context.user_data['order_summary'] = s
    ret = context.user_data.get('return_detailed') or {}
    ret_lines = [f"{name}: {qty}" for name, qty in ret.items()] if ret else [context.user_data.get('return_raw', '–Ω–µ—Ç')]
    ord_lines = [f"{name}: {qty}" for name, qty in d.items()] + [f"üí∞ –°—É–º–º–∞: {total} —Ç–≥"]
    msg = f"""‚úÖ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞:
üìç –ú–∞–≥–∞–∑–∏–Ω: {context.user_data['magazin']}
‚Ü©Ô∏è –í–æ–∑–≤—Ä–∞—Ç:
{chr(10).join(ret_lines)}
üì¶ –ó–∞–∫–∞–∑:
{chr(10).join(ord_lines)}"""
    await update.message.reply_text("–°–ø–∞—Å–∏–±–æ! –ó–∞—è–≤–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.")
    await context.bot.send_message(chat_id=TARGET_CHAT_ID, text=msg)
    markup = ReplyKeyboardMarkup([["–î–∞", "–ù–µ—Ç"]], one_time_keyboard=True, resize_keyboard=True)
    await update.message.reply_text("–•–æ—á–µ—à—å –æ—Ñ–æ—Ä–º–∏—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É?", reply_markup=markup)
    return RESTART

async def restart_or_end(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text.strip().lower() == "–¥–∞":
        return await start(update, context)
    markup = ReplyKeyboardMarkup([["/start"]], one_time_keyboard=True, resize_keyboard=True)
    await update.message.reply_text("–•–æ—Ä–æ—à–æ! –ï—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å —Å–Ω–æ–≤–∞ ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ /start üëá", reply_markup=markup)
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    return ConversationHandler.END

# –ó–∞–ø—É—Å–∫
if __name__ == '__main__':
    app = ApplicationBuilder().token(TOKEN).build()
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            CHOICE: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_choice)],
            COMMENT: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_comment)],
            COMMENT_EXCHANGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_comment_exchange)],
            MAGAZIN: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_magazin)],
            RETURN: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_return)],
            ORDER: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_order)],
            RESTART: [MessageHandler(filters.TEXT & ~filters.COMMAND, restart_or_end)],
        },
        fallbacks=[CommandHandler('cancel', cancel)],
    )
    app.add_handler(conv_handler)
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()
