import re
import os
from datetime import datetime
import gspread
import logging
from oauth2client.service_account import ServiceAccountCredentials
from telegram import ReplyKeyboardMarkup, ReplyKeyboardRemove, Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ConversationHandler,
    filters,
    ContextTypes,
)
from rapidfuzz import fuzz

# ------------- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Google Sheets ------------------
def connect_to_sheet():
    scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
    creds = ServiceAccountCredentials.from_json_keyfile_name(
        "pryaniki-analitika-c144b76a284d.json", scope
    )
    client = gspread.authorize(creds)
    sheet = client.open("–ø—Ä—è–Ω–∏–∫–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞").sheet1
    return sheet


def write_zayavka_to_sheet(date, magazin, use_special_price, summary, total):
    try:
        sheet = connect_to_sheet()

        # üëá –°—É–º–º–∏—Ä—É–µ–º –≤–µ—Å–æ–≤—ã–µ —Å –ø–æ–º–æ—â—å—é —Ñ—É–Ω–∫—Ü–∏–∏-–∞–≥—Ä–µ–≥–∞—Ç–æ—Ä–∞
        total_vesovye = aggregate_vesovye(summary)

        row = [
            date,
            magazin,
            "–î–∞" if use_special_price else "–ù–µ—Ç",
            summary.get("0.3", 0),
            summary.get("0.4", 0),
            summary.get("0.45", 0),
            summary.get("–ë–µ–ª—ã–µ", 0),
            summary.get("–ß–µ—Ä–Ω—ã–µ", 0),
            summary.get("–†–æ–∑–æ–≤—ã–µ", 0),
            total_vesovye,  # üëà –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            summary.get("–ë–µ–ª—ã–µ –≤–µ—Å–æ–≤—ã–µ", 0),
            total,
        ]
        sheet.append_row(row)
        print("‚úÖ –ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω–∞ –≤ Google –¢–∞–±–ª–∏—Ü—É")
    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ Google –¢–∞–±–ª–∏—Ü—É:", e)

def write_skip_to_sheet(date, magazin, reason, return_summary):
    try:
        sheet = connect_to_sheet()

        total_vesovye = aggregate_vesovye(return_summary)

        row = [
            date,
            magazin,
            "–ù–µ—Ç",
            return_summary.get("0.3", 0),
            return_summary.get("0.4", 0),
            return_summary.get("0.45", 0),
            return_summary.get("–ë–µ–ª—ã–µ", 0),
            return_summary.get("–ß–µ—Ä–Ω—ã–µ", 0),
            return_summary.get("–†–æ–∑–æ–≤—ã–µ", 0),
            total_vesovye,
            return_summary.get("–ë–µ–ª—ã–µ –≤–µ—Å–æ–≤—ã–µ", 0),
            "",  # —Å—É–º–º–∞
        ]
        sheet.append_row(row)
        print("‚úÖ –ü—Ä–æ–ø—É—Å–∫ –∑–∞–ø–∏—Å–∞–Ω –≤ Google –¢–∞–±–ª–∏—Ü—É")
    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –ø—Ä–æ–ø—É—Å–∫–∞:", e)



# ------------- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ------------------
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)

# ------------- –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞ ------------------
CHOICE, MAGAZIN, RETURN, ORDER, RESTART, COMMENT, COMMENT_RETURN = range(7)

# ------------- –¢–æ–∫–µ–Ω –∏ —á–∞—Ç ------------------
TOKEN = os.getenv("TELEGRAM_TOKEN")
TARGET_CHAT_ID = -1002805411399  # —Å—é–¥–∞ –ø—Ä–∏—Ö–æ–¥—è—Ç –∑–∞—è–≤–∫–∏

# ------------- –î–∞–Ω–Ω—ã–µ –ø–æ –ø—Ä—è–Ω–∏–∫–∞–º ------------------
pryaniki_items = [
    {"name": "–ë–µ–ª—ã–µ –ø–∞–∫–µ—Ç—ã", "category": "–ë–µ–ª—ã–µ", "aliases": ["–±–µ–ª—ã–µ –ø–∞–∫–µ—Ç—ã", "–±–ø", "–±–µ–ª—ã—Ö", "–±–µ–ª—ã–µ", "–±–µ–ª"]},
    {"name": "–ß–µ—Ä–Ω—ã–µ –ø–∞–∫–µ—Ç—ã", "category": "–ß–µ—Ä–Ω—ã–µ", "aliases": ["—á–µ—Ä–Ω—ã–µ –ø–∞–∫–µ—Ç—ã", "—á–ø", "—á–µ—Ä–Ω", "—á–µ—Ä–Ω—ã–µ", "—á–µ—Ä–Ω—ã—Ö", "—á–µ—Ä–Ω—ã–µ –ø–∞–∫"]},
    {"name": "–†–æ–∑–æ–≤—ã–µ –ø–∞–∫–µ—Ç—ã", "category": "–†–æ–∑–æ–≤—ã–µ", "aliases": ["—Ä–æ–∑–æ–≤—ã–µ", "—Ä–æ–∑ –ø–∞–∫", "—Ä–æ–∑", "—Ä–æ–∑–æ–≤—ã—Ö", "—Ä–æ–∑–∞–≤—ã–µ", "—Ä–æ–∑–æ–≤—ã–µ –ø–∞–∫–µ—Ç—ã"]},
    {"name": "–ö–ª—É–±–Ω–∏—á–Ω—ã–µ", "category": "0.3", "aliases": ["–∫–ª—É–±–Ω–∏—á–Ω—ã–µ", "–∫–ª—É–±–Ω", "–∫–ª—É–±", "–∫–ª—É–±–Ω–∏–∫–∞"]},
    {"name": "–°–ª–∏–≤–æ—á–Ω—ã–µ", "category": "0.3", "aliases": ["—Å–ª–∏–≤–æ—á–Ω—ã–µ", "—Å–ª–∏–≤", "—Å–ª–∏–≤–æ—á"]},
    {"name": "–õ–∏–º–æ–Ω–Ω—ã–µ", "category": "0.3", "aliases": ["–ª–∏–º–æ–Ω–Ω—ã–µ", "–ª–∏–º–æ–Ω", "–ª–∏–º"]},
    {"name": "–ê–ø–µ–ª—å—Å–∏–Ω–æ–≤—ã–µ", "category": "0.3", "aliases": ["–∞–ø–µ–ª—å—Å–∏–Ω–æ–≤—ã–µ", "–∞–ø–µ–ª—å—Å", "–∞–ø–µ–ª—å—Å–∏–Ω"]},
    {"name": "–§—Ä—É–∫—Ç–æ–≤—ã–µ", "category": "0.3", "aliases": ["—Ñ—Ä—É–∫—Ç–æ–≤—ã–µ", "—Ñ—Ä—É–∫—Ç", "—Ñ—Ä—É–∫"]},
    {"name": "–ò—Ç–∞–ª—å—è–Ω—Å–∫–∞—è –∫–∞—Ä–∞–º–µ–ª—å", "category": "0.3", "aliases": ["–∏—Ç –∫–∞—Ä–∞–º–µ–ª—å", "–∫–∞—Ä–∞–º–µ–ª—å", "–∫–∞—Ä–∞–º", "–∏—Ç –∫–∞—Ä–∞–º"]},
    {"name": "–¢–æ–ø–ª–µ–Ω–∫–∞", "category": "0.3", "aliases": ["—Ç–æ–ø–ª–µ–Ω–∫–∞", "—Ç–æ–ø–ª", "—Ç–æ–ø–ª–µ–Ω", "—Ç–æ–ø–ª–µ–Ω–Ω–æ–µ –º–æ–ª–æ–∫–æ"]},
    {"name": "–†–æ–º–∞—à–∫–∞", "category": "0.4", "aliases": ["—Ä–æ–º–∞—à–∫–∞", "—Ä–æ–º–∞—à", "—Ä–æ–º"]},
    {"name": "–ú–µ–¥–æ–≤—ã–µ", "category": "0.4", "aliases": ["–º–µ–¥–æ–≤—ã–µ", "–º–µ–¥–æ–≤"]},
    {"name": "–ú–∞–∫–æ–≤—ã–µ", "category": "0.4", "aliases": ["–º–∞–∫–æ–≤—ã–µ", "–º–∞–∫", "–º–∞–∫–æ–≤"]},
    {"name": "–í–∞–Ω–∏–ª—å–Ω—ã–µ", "category": "0.4", "aliases": ["–≤–∞–Ω–∏–ª—å–Ω—ã–µ", "–≤–∞–Ω–∏–ª—å", "–≤–∞–Ω", "–≤–∞–Ω–∏–ª"]},
    {"name": "Love Kz", "category": "0.4", "aliases": ["love kz", "love", "–ª–æ–≤", "–ª–∞–≤", "–ª–æ–≤ –∫–∑", "–ª–∞–≤ –∫–∑"]},
    {"name": "–†–∂–∞–Ω—ã–µ", "category": "0.4", "aliases": ["—Ä–∂–∞–Ω—ã–µ", "—Ä–∂–∞–Ω", "—Ä–∂", "—Ä–∂–∞–Ω–æ–π"]},
    {"name": "–°–≥—É—â–µ–Ω–∫–∞", "category": "0.45", "aliases": ["—Å–≥—É—â–µ–Ω–∫–∞", "—Å–≥—É—â–µ–Ω", "—Å–≥—É—â", "—Å–Ω—É—â"]},
    {"name": "–ê–π–Ω–∞–ª–∞–π–Ω", "category": "0.45", "aliases": ["–∞–π–Ω–∞–ª–∞–π–Ω", "–∞–π–Ω–∞–ª", "–∞–π–Ω–∞–ª–∞"]},
    {"name": "–í–∏–Ω–æ–≥—Ä–∞–¥", "category": "0.45", "aliases": ["–≤–∏–Ω–æ–≥—Ä–∞–¥", "–≤–∏–Ω–æ–≥—Ä–∞–¥–Ω—ã–µ", "–≤–∏–Ω", "–≤–∏–Ω–∞–≥—Ä–∞–¥"]},
    {"name": "–¢–≤–æ—Ä–æ–∂–æ–∫", "category": "0.45", "aliases": ["—Ç–≤–æ—Ä–æ–∂–æ–∫", "—Ç–≤–æ—Ä–æ–≥", "—Ç–≤–∞—Ä–∞–∂–æ–∫", "—Ç–≤–∞—Ä–æ–∂", "—Ç–≤–æ—Ä"]},
    {"name": "–ë–µ–ª—ã–µ –≤–µ—Å–æ–≤—ã–µ", "category": "–ë–µ–ª—ã–µ –≤–µ—Å–æ–≤—ã–µ", "aliases": [
        "–±–µ–ª –≤–µ—Å–æ–≤—ã–µ", "–±–µ–ª –≤–µ—Å", "–≤–µ—Å –±–µ–ª", "–±–µ–ª—ã–µ –≤–µ—Å–æ–≤—ã–µ", "–±–µ–ª–≤–µ—Å", "–±–µ–ª–≤–µ—Å–æ–≤—ã–µ", "–±–µ–ª—ã–µ –≤–µ—Å",
        "–±–µ–ª. –≤–µ—Å–æ–≤—ã–µ", "–±–µ–ª. –≤–µ—Å", "–±–µ–ª—ã–µ –≤–µ—Å.", "–±–µ–ª.–≤–µ—Å", "–±–µ–ª.–≤–µ—Å.", "–±–µ–ª–≤–µ—Å.", "–±–µ–ª–≤–µ—Å–æ–≤—ã–µ."
    ]},
    {"name": "–í–µ—Å–æ–≤—ã–µ –∫—Ä—É–≥–ª—ã–µ", "category": "–í–µ—Å–æ–≤—ã–µ (–∫—Ä—É–≥–ª—ã–µ –∏ –æ–≤–∞–ª—å–Ω—ã–µ)", "aliases": [
        "–∫—Ä—É–≥–ª—ã–µ", "–∫—Ä—É–≥–ª", "–≤–µ—Å –∫—Ä—É–≥–ª", "–∫—Ä—É–≥–ª –≤–µ—Å", "–≤–µ—Å–æ–≤—ã–µ –∫—Ä—É–≥–ª", 
        "–≤–µ—Å–æ–≤—ã–µ –∫—Ä—É–≥–ª.", "–∫—Ä—É–≥–ª. –≤–µ—Å–æ–≤—ã–µ", "–≤–µ—Å. –∫—Ä—É–≥–ª", "–≤–µ—Å. –∫—Ä—É–≥–ª.", 
        "–≤–µ—Å.–∫—Ä—É–≥–ª", "–≤–µ—Å.–æ–∫—Ä—É–≥–ª", "–∫—Ä—É–≥–ª—ã–π –≤–µ—Å", "–≤–µ—Å –∫—Ä—É–≥–ª—ã–π", "–∫—Ä—É–≥–ª—ã–π"
    ]},
    { "name": "–í–µ—Å–æ–≤—ã–µ –æ–≤–∞–ª—å–Ω—ã–µ", "category": "–í–µ—Å–æ–≤—ã–µ (–∫—Ä—É–≥–ª—ã–µ –∏ –æ–≤–∞–ª—å–Ω—ã–µ)", "aliases": [
        "–æ–≤–∞–ª—å–Ω—ã–µ", "–æ–≤–∞–ª", "–≤–µ—Å –æ–≤–∞–ª", "–≤–µ—Å–æ–≤—ã–µ –æ–≤–∞–ª—å–Ω—ã–µ", "–æ–≤–∞–ª—å–Ω", "–æ–≤–∞–ª—å–Ω.",
        "–≤–µ—Å. –æ–≤–∞–ª", "–≤–µ—Å.–æ–≤–∞–ª—å–Ω", "–æ–≤–∞–ª –≤–µ—Å", "–≤–µ—Å –æ–≤–∞–ª—å–Ω—ã–π", "–æ–≤–∞–ª—å–Ω—ã–π"
    ]},
    {"name": "0.3", "category": "0.3", "aliases": ["0.3", "0,3"]},
    {"name": "0.4", "category": "0.4", "aliases": ["0.4", "0,4"]},
    {"name": "0.45", "category": "0.45", "aliases": ["0.45", "0,45"]},
    {"name": "–í–µ—Å–æ–≤—ã–µ", "category": "–í–µ—Å–æ–≤—ã–µ", "aliases": [
        "–≤–µ—Å–æ–≤—ã–µ", "–≤–µ—Å", "–≤–µ—Å–æ–≤–æ–µ", "–≤–µ—Å.", "–≤–µ—Å,", "–≤–µ—Å–æ", "–≤–µ—Å–æ–≤–æ–π", "–≤–µ—Å–æ–≤–æ–µ.", "–≤–µ—Å–æ–≤–æ–µ,"
    ]},
]

regular_prices = {
    "0.3": 400,
    "0.4": 460,
    "0.45": 490,
    "–ë–µ–ª—ã–µ": 550,
    "–ß–µ—Ä–Ω—ã–µ": 550,
    "–†–æ–∑–æ–≤—ã–µ": 550,
    "–í–µ—Å–æ–≤—ã–µ (–∫—Ä—É–≥–ª—ã–µ –∏ –æ–≤–∞–ª—å–Ω—ã–µ)": 4320,
    "–ë–µ–ª—ã–µ –≤–µ—Å–æ–≤—ã–µ": 5740,
    "–í–µ—Å–æ–≤—ã–µ": 4320,
}

special_prices = {
    "0.3": 360,
    "0.4": 450,
    "0.45": 405,
    "–ë–µ–ª—ã–µ": 495,
    "–ß–µ—Ä–Ω—ã–µ": 495,
    "–†–æ–∑–æ–≤—ã–µ": 495,
    "–ë–µ–ª—ã–µ –≤–µ—Å–æ–≤—ã–µ": 5600,
    "–í–µ—Å–æ–≤—ã–µ (–∫—Ä—É–≥–ª—ã–µ –∏ –æ–≤–∞–ª—å–Ω—ã–µ)": 4200,
    "–í–µ—Å–æ–≤—ã–µ": 4200,
}

def aggregate_vesovye(summary):
    total_vesovye = 0
    # –°—É–º–º–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ø–∞–¥–∞—é—Ç –ø–æ–¥ "–í–µ—Å–æ–≤—ã–µ"
    total_vesovye += summary.get("–í–µ—Å–æ–≤—ã–µ", 0)
    total_vesovye += summary.get("–í–µ—Å–æ–≤—ã–µ (–∫—Ä—É–≥–ª—ã–µ –∏ –æ–≤–∞–ª—å–Ω—ã–µ)", 0)
    total_vesovye += summary.get("–í–µ—Å–æ–≤—ã–µ –∫—Ä—É–≥–ª—ã–µ", 0)
    total_vesovye += summary.get("–í–µ—Å–æ–≤—ã–µ –æ–≤–∞–ª—å–Ω—ã–µ", 0)
    # –ï—Å–ª–∏ –µ—Å—Ç—å –µ—â—ë –∫–∞–∫–∏–µ-—Ç–æ –≤–µ—Å–∞, –¥–æ–±–∞–≤–ª—è–π —Å—é–¥–∞
    return total_vesovye

# ------------- –ü–∞—Ä—Å–µ—Ä –∑–∞—è–≤–∫–∏ ------------------
def parse_order(text):
    lines = text.lower().splitlines()
    detailed, summary = {}, {}

    for line in lines:
        line = line.strip()
        if not line:
            continue

        tokens = re.findall(r'\S+', line)
        i = 0
        while i < len(tokens):
            token = tokens[i]

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ
            if token.isdigit():
                qty = int(token)
                i += 1
                if i < len(tokens):
                    name_part = tokens[i]
                    i += 1
                else:
                    break
            else:
                name_part = token
                qty = 1
                if i + 1 < len(tokens) and tokens[i + 1].isdigit():
                    qty = int(tokens[i + 1])
                    i += 2
                else:
                    i += 1

            name_part = name_part.strip()

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–µ—Å–æ–≤—ã—Ö ‚Äî —Å–Ω–∞—á–∞–ª–∞ —É—Ç–æ—á–Ω—ë–Ω–Ω—ã–µ, –ø–æ—Ç–æ–º –ø—Ä–æ—Å—Ç–æ –≤–µ—Å
            if "–≤–µ—Å" in name_part:
                matched_weight = False

                if "–æ–≤–∞–ª—å–Ω" in name_part or "–æ–≤–∞–ª" in name_part:
                    name = "–í–µ—Å–æ–≤—ã–µ –æ–≤–∞–ª—å–Ω—ã–µ"
                    cat = "–í–µ—Å–æ–≤—ã–µ (–∫—Ä—É–≥–ª—ã–µ –∏ –æ–≤–∞–ª—å–Ω—ã–µ)"
                    matched_weight = True
                elif "–∫—Ä—É–≥–ª" in name_part:
                    name = "–í–µ—Å–æ–≤—ã–µ –∫—Ä—É–≥–ª—ã–µ"
                    cat = "–í–µ—Å–æ–≤—ã–µ (–∫—Ä—É–≥–ª—ã–µ –∏ –æ–≤–∞–ª—å–Ω—ã–µ)"
                    matched_weight = True
                elif name_part.strip() in ["–≤–µ—Å", "–≤–µ—Å–æ–≤—ã–µ", "–≤–µ—Å–æ–≤—ã–π"]:
                    name = "–í–µ—Å–æ–≤—ã–µ"
                    cat = "–í–µ—Å–æ–≤—ã–µ"
                    matched_weight = True

                if matched_weight:
                    detailed[name] = detailed.get(name, 0) + qty
                    summary[cat] = summary.get(cat, 0) + qty
                    continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º fuzzy matching –¥–ª—è –≤–µ—Å–æ–≤—ã—Ö

            # Fuzzy Matching –ø–æ –æ—Å—Ç–∞–ª—å–Ω—ã–º
            best_match = None
            best_score = 0

            for item in pryaniki_items:
                for alias in item['aliases']:
                    score = fuzz.partial_ratio(name_part, alias)
                    if score > best_score:
                        best_score = score
                        best_match = item

            if best_score >= 70 and best_match:
                name = best_match["name"]
                cat = best_match["category"]
                detailed[name] = detailed.get(name, 0) + qty
                summary[cat] = summary.get(cat, 0) + qty

    return detailed, summary

def calculate_total(summary, prices):
    return sum(summary.get(cat, 0) * prices.get(cat, 0) for cat in summary)

def parse_magazin_and_reason(text: str):
    lines = text.strip().splitlines()
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤—ë–ª –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫
    if len(lines) >= 2:
        magazin = lines[0].strip()
        reason_line = lines[1].strip()

        # –ü–æ–ø—Ä–æ–±—É–µ–º –≤—ã—Ç–∞—â–∏—Ç—å –∏–∑ —Å–∫–æ–±–æ–∫, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        match = re.match(r"^\(?(.+?)\)?$", reason_line)
        if match:
            reason = match.group(1).strip()
        else:
            reason = reason_line

        return magazin, reason

    # –ò–Ω–∞—á–µ ‚Äî –∫–∞–∫ —Ä–∞–Ω—å—à–µ, –∏—â–µ–º –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
    match = re.match(r"^(.*?)\s*\((.*?)\)\s*$", text)
    if match:
        magazin_name = match.group(1).strip()
        reason = match.group(2).strip()
        return magazin_name, reason

    return text.strip(), ""


# ------------- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ------------------

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    markup = ReplyKeyboardMarkup([["–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞—è–≤–∫—É", "–ü—Ä–æ–ø—É—Å–∫ / –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"]], one_time_keyboard=True, resize_keyboard=True)
    await update.message.reply_text("–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?", reply_markup=markup)
    return CHOICE

async def handle_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip().lower()
    if "–∑–∞—è–≤–∫" in text:
        await update.message.reply_text("–ù–∞–∑–æ–≤–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –º–∞–≥–∞–∑–∏–Ω.", reply_markup=ReplyKeyboardRemove())
        return MAGAZIN
    elif "–∫–æ–º–º–µ–Ω—Ç–∞—Ä" in text or "–ø—Ä–æ–ø—É—Å–∫" in text:
        await update.message.reply_text("–ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞ –∏ –ø—Ä–∏—á–∏–Ω—É –ø—Ä–æ–ø—É—Å–∫–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ):", reply_markup=ReplyKeyboardRemove())
        return COMMENT
    else:
        await update.message.reply_text("–ù–µ –ø–æ–Ω—è–ª –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞: /start")
        return ConversationHandler.END

async def get_magazin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()

    if any(k in text.lower() for k in ["—Å–ø–µ—Ü", "—Å–ø–µ—Ü —Ü–µ–Ω–∞", "—Å–ø–µ—Ü.—Ü–µ–Ω–∞", "—Å–ø–µ—Ü —Ü–µ–Ω"]):
        context.user_data['use_special_price'] = True
        clean_name = re.sub(r"\b—Å–ø–µ—Ü(?:\.| —Ü–µ–Ω–∞| —Ü–µ–Ω)?\b", "", text, flags=re.IGNORECASE).strip()
        context.user_data['magazin'] = f"{clean_name} (—Å–ø–µ—Ü —Ü–µ–Ω–∞)"
    else:
        context.user_data['use_special_price'] = False
        context.user_data['magazin'] = text

    await update.message.reply_text(
    "–ï—Å–ª–∏ –µ—Å—Ç—å –≤–æ–∑–≤—Ä–∞—Ç, –Ω–∞–ø–∏—à–∏ –µ–≥–æ, –µ—Å–ª–∏ –Ω–µ—Ç ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ '–ù–µ—Ç'",
    reply_markup=ReplyKeyboardMarkup([["–ù–µ—Ç"]], one_time_keyboard=True, resize_keyboard=True)
)
    return RETURN

async def get_return(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    context.user_data['return_raw'] = text
    d, s = parse_order(text)
    context.user_data['return_detailed'] = d
    context.user_data['return_summary'] = s

    await update.message.reply_text("–ß—Ç–æ –∑–∞–∫–∞–∑–∞–ª –º–∞–≥–∞–∑–∏–Ω?")
    reply_markup=ReplyKeyboardRemove()
    return ORDER

async def get_order(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    d, s = parse_order(text)

    prices = special_prices if context.user_data.get('use_special_price') else regular_prices
    total = calculate_total(s, prices)

    context.user_data['order_detailed'] = d
    context.user_data['order_summary'] = s

    ret = context.user_data.get('return_detailed') or {}
    ret_lines = [f"{name}: {qty}" for name, qty in ret.items()] if ret else ["–ù–µ—Ç"]

    ord_lines = [f"{name}: {qty}" for name, qty in d.items()] + [f"üí∞ –°—É–º–º–∞: {total} —Ç–≥"]

    msg = f"""‚úÖ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞:
üìç –ú–∞–≥–∞–∑–∏–Ω: {context.user_data['magazin']}
‚Ü©Ô∏è –í–æ–∑–≤—Ä–∞—Ç:
{chr(10).join(ret_lines)}
üì¶ –ó–∞–∫–∞–∑:
{chr(10).join(ord_lines)}"""

    await context.bot.send_message(chat_id=TARGET_CHAT_ID, text=msg)
    await update.message.reply_text("–°–ø–∞—Å–∏–±–æ! –ó–∞—è–≤–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.")

    markup = ReplyKeyboardMarkup([["–î–∞", "–ù–µ—Ç"]], one_time_keyboard=True, resize_keyboard=True)
    await update.message.reply_text("–•–æ—á–µ—à—å –æ—Ñ–æ—Ä–º–∏—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É?", reply_markup=markup)

    date = datetime.now().strftime("%d.%m.%Y")
    write_zayavka_to_sheet(
        date=date,
        magazin=context.user_data['magazin'],
        use_special_price=context.user_data.get('use_special_price', False),
        summary=s,
        total=total,
    )

    return RESTART

async def handle_comment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    context.user_data['comment_magazin'] = text
    await update.message.reply_text(
        "–ï—Å—Ç—å –ª–∏ –≤–æ–∑–≤—Ä–∞—Ç? –ù–∞–ø–∏—à–∏ –µ–≥–æ –∏–ª–∏ –Ω–∞–∂–º–∏ '–ù–µ—Ç'",
        reply_markup=ReplyKeyboardMarkup([["–ù–µ—Ç"]], resize_keyboard=True, one_time_keyboard=True)
    )
    return COMMENT_RETURN

async def handle_comment_return(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    d, s = parse_order(text)
    context.user_data['return_detailed'] = d
    context.user_data['return_summary'] = s

    raw_text = context.user_data.get('comment_magazin', '–ù–µ —É–∫–∞–∑–∞–Ω')
    magazin, reason = parse_magazin_and_reason(raw_text)

    ret_lines = [f"{name}: {qty}" for name, qty in d.items()] if d else ["–ù–µ—Ç"]

    msg = f"""‚ùå –ü—Ä–æ–ø—É—Å–∫
üìç –ú–∞–≥–∞–∑–∏–Ω: {magazin}
üìå –ü—Ä–∏—á–∏–Ω–∞: {reason if reason else "–ù–µ —É–∫–∞–∑–∞–Ω–∞"}
‚Ü©Ô∏è –í–æ–∑–≤—Ä–∞—Ç:
{chr(10).join(ret_lines)}"""

    await context.bot.send_message(chat_id=TARGET_CHAT_ID, text=msg)
    reply_markup=ReplyKeyboardRemove()
    await update.message.reply_text("–ü—Ä–æ–ø—É—Å–∫ —Å –≤–æ–∑–≤—Ä–∞—Ç–æ–º –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω.")

    # –ó–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü—É
    date = datetime.now().strftime("%d.%m.%Y")
    write_skip_to_sheet(date, magazin, reason, s)

    markup = ReplyKeyboardMarkup([["–î–∞", "–ù–µ—Ç"]], one_time_keyboard=True, resize_keyboard=True)
    await update.message.reply_text("–•–æ—á–µ—à—å –æ—Ñ–æ—Ä–º–∏—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É?", reply_markup=markup)
    return RESTART

async def restart_or_end(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text.strip().lower() == "–¥–∞":
        return await start(update, context)
    
    markup = ReplyKeyboardMarkup([["/start"]], resize_keyboard=True)
    await update.message.reply_text("–î–æ –≤—Å—Ç—Ä–µ—á–∏! –ù–∞–∂–º–∏ /start, –µ—Å–ª–∏ —Ö–æ—á–µ—à—å –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.", reply_markup=markup)
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    return ConversationHandler.END

# ------------- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ------------------
if __name__ == '__main__':
    app = ApplicationBuilder().token(TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            CHOICE: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_choice)],
            MAGAZIN: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_magazin)],
            RETURN: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_return)],
            ORDER: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_order)],
            COMMENT: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_comment)],
            COMMENT_RETURN: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_comment_return)],
            RESTART: [MessageHandler(filters.TEXT & ~filters.COMMAND, restart_or_end)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    app.add_handler(conv_handler)

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()
